# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read
  actions: write  # Required for artifact cleanup

jobs:
  cleanup-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: owner,
              repo: repo,
              per_page: 100
            });
            
            // Delete artifacts older than 1 day or with specific names
            const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            
            for (const artifact of artifacts.data.artifacts) {
              const artifactDate = new Date(artifact.created_at);
              
              // Delete old release-dists artifacts or artifacts older than 1 day
              if (artifact.name === 'release-dists' || artifactDate < oneDayAgo) {
                console.log(`Deleting artifact: ${artifact.name} (created: ${artifact.created_at})`);
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: owner,
                    repo: repo,
                    artifact_id: artifact.id
                  });
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }

  release-build:
    runs-on: ubuntu-latest
    needs: cleanup-artifacts
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ">=3.11"
      
      - name: Clean dist directory
        run: |
          # Remove any existing dist directory to ensure clean build
          rm -rf dist/
          mkdir -p dist/
      
      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build
      
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
          retention-days: 1  # Keep artifacts for only 1 day

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  cleanup-after-publish:
    runs-on: ubuntu-latest
    needs: pypi-publish
    if: always()  # Run even if publishing fails
    steps:
      - name: Clean up release artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get artifacts for this workflow run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: owner,
              repo: repo,
              run_id: context.runId
            });
            
            // Delete the release-dists artifact from this run
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'release-dists') {
                console.log(`Cleaning up artifact: ${artifact.name}`);
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: owner,
                    repo: repo,
                    artifact_id: artifact.id
                  });
                } catch (error) {
                  console.log(`Failed to delete artifact: ${error.message}`);
                }
              }
            }
